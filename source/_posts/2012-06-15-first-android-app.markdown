---
layout: post
title: "First Android App"
date: 2012-06-15 11:36
comments: true
categories: 
published: false
---

I've finished a beta of my first Android app for internal use, a front office system for the Cafe owned by our company. It has 6 thousands of lines of code, I've spent 170 hours of immidiate development for it.

<!--more-->

## App Features

So, what the app can do?

It can load a list of goods through FTP or 1C web service. It consumes the following data: name of the item, its group, price and a weight goods tag.

The app displays the list of goods divided by their groups for easier look up for the needed item. The lists shows the name and price for each item.

{%imgcap /images/posts/2012/first-android-app-1.jpg Goods (blue border) and groups (white border) %}

Формировать заказ по наименованиям и количествам. В заказ могут быть добавлены как штучные товары (регулирование количества осуществляется кнопками +/-), так и весовые (ввод количества с клавиатуры). По мере формирования заказа отображается его итоговая сумма без учета скидок.

{%imgcap /images/posts/2012/first-android-app-2-order.jpg Заказ из трех позиций %}

{%imgcap /images/posts/2012/first-android-app-3-weight.jpg Запрос количества для весового товара %}

Учитывать карты клиента и, соответственно, расчет скидки по карте при оплате заказа. Карту указывают путем ввода ее номера в специальном окне. В дальнейшем планируется определять карту по штрих-коду.

{%imgcap /images/posts/2012/first-android-app-4-card-number.jpg Запрос номера карты %}

{%imgcap /images/posts/2012/first-android-app-5-payment.jpg Окно оплаты при запросе баланса и при нулевом балансе %}

Предоставлять возможность оплаты части заказа бонусами по карте клиента. Оплата осуществляется в размере, не превышающем определенный процент от суммы заказа. Оплата бонусами возможна по курсу, отличному от 1 к 1.

{%imgcap /images/posts/2012/first-android-app-6-payment-plus.jpg Окно оплаты при положительном балансе %}

Списывать бонусы с карты через веб-сервис 1С в момент оплаты заказа.
Записывать детальную информацию о продаже в базу приложения и в базу 1С через веб-сервис.

{%imgcap /images/posts/2012/first-android-app-7-links.png Связи приложения с другими системами %}

В настройки вынесены:
* Выбор способа загрузки номенклатуры: FTP или веб-сервис.
* Параметры сервера FTP.
* Адреса веб-сервисов: для загрузки номенклатуры и для работы с бонусами.
* Процент скидки по карте клиента.
* Код текущего подразделения, осуществляющего продажи.
* Максимальный процент от суммы заказа, который можно оплатить бонусами.
* Курс (ставка) бонусов.

## Технические детали

При разработке приложения, в общем-то, проблем, которые бы не удалось быстро решить, практически не возникало. На мой взгляд, только два момента заслуживают внимания:

При работе с одной базой SQLite в Android нужно использовать только один OpenHelper. Это открытие было сделано, когда уже существовали два хелпера, используемых в разных частях приложения. Пришлось потратить часа 4, чтобы эту ситуацию исправить.
Много времени потратил, чтобы заставить свое приложение подружиться с веб-сервисами 1С. В принципе, с этой задачей отлично справляется библиотека ksoap2-android, когда мы работаем с простыми типами данных. Когда же нам нужно передавать массивы (список номенклатуры, проданной одним чеком), то дружба с 1С заканчивается. Решение проблемы я описал на хабре. Еще одна вещь, которую нужно учитывать при работе с веб-сервисами 1С из приложения на Android – все имена в веб-сервисе должны быть написаны на латинице. Во всяком случае мне не удалось заставить работать Android с русскими именами – веб-сервис упорно отвечал 500-ой ошибкой, хотя визуально запросы формировались правильно.
Для тестирования приложения я использовал Robolectric, очень интересная и удобная вещь. Замечательная вещь, сокращающая количество строк кода тестов и высвобождающая время – Mockito, используемая для имитации зависимостей (mock the dependencies). В идеале еще можно использовать Robotium для приемочного тестирования, но для текущего проекта не нашел времени добавить его. Я сейчас только начинаю применять подход TDD, достаточно интересно, хотя и сложно… применять его правильно. Нужно понять, что и как нужно тестировать, а это приходит, видимо, только с практикой. Трекинг требований и ошибок в приложении осуществляется с помощью FogBugz. Там же удобно вести учет времени работы над каждой задачей, особенно при использовании Eclipse. У него есть замечательный коннектор к FogBugz, который отмечает начало и окончание работы над задачей. FogBugz же уже сам вычисляет, сколько времени было затрачено на задачу, учитывая расписание работы программиста. Код приложения хранится в Kiln, связанном с FogBugz. Все коммиты можно “соединять” с задачами, чтобы потом легче было понять, что же было сделано для ее решения. Для разработки также пробовал IntelliJ IDEA, про которую можно найти много очень лестных отзывов. Я считаю, что она очень хороша, но Eclipse мне нравится больше. Автодополнение кода у них, на мой взгляд, работает примерно одинаково, но у Eclipse есть несколько дополнительных приятных фишек, таких как, например, тесная интеграция с FogBugz.

## Заключение

Первый вариант готов. Сейчас наступает период полевых испытаний непосредственно в кафе, не менее интересный этап, чем непосредственно разработка. Надеюсь на успешное его протекание :)

Update 01.04.2012. Приложение работает. Не идеально, но работает :) Решил выложить исходники, все равно никто его не развивает, да и в них кода не так много интересного и супер-сложного: сами исходники и тесты для приложения.